if (commandName === 'partycreate') {
        const activity = options.getString('activity');
        const size = options.getInteger('size');
        const description = options.getString('description');
        
        let embed = new EmbedBuilder()
            .setTitle('Party Created')
            .setDescription(`Activity: ${activity}`)
            .setColor(0x00AE86)
            .addFields(
                { name: 'Max Size', value: size ? size.toString() : 'No limit', inline: true },
                { name: 'Description', value: description ? description : 'No description provided', inline: true }
            );

        // Acknowledge the interaction and send the embed message
        await interaction.deferReply();
        await interaction.editReply({ embeds: [embed] });
    }

    if (commandName === 'eventcreate') {
        const attendButton = new ButtonBuilder()
            .setCustomId('attend')
            .setLabel('Attend')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(attendButton);

        let embed = new EmbedBuilder()
            .setTitle('Event Created')
            .setDescription('Click the button to attend.')
            .setColor(0x00AE86);

        await interaction.deferReply();
        const message = await interaction.editReply({
            embeds: [embed],
            components: [row]
        });

        // Initialize attendance count
        let attendanceCount = 0;

        const filter = i => i.customId === 'attend' && i.message.id === message.id;

        const collector = message.createMessageComponentCollector({ filter, componentType: ComponentType.Button, time: 60000 });

        collector.on('collect', async i => {
            attendanceCount++;
            let updatedEmbed = new EmbedBuilder()
                .setTitle('Event Created')
                .setDescription(`Click the button to attend.\n${attendanceCount} people are attending.`)
                .setColor(0x00AE86);
            await i.update({
                embeds: [updatedEmbed],
                components: [row]
            });
        });

        collector.on('end', collected => {
            console.log(`Collected ${collected.size} interactions.`);
        });
    }
}







new SlashCommandBuilder()
        .setName('partycreate')
        .setDescription('Format: /partycreate activity size description')
        .addStringOption(option =>
            option.setName('activity')
                .setDescription('Why are you making a party?')
                .setRequired(true))
        .addIntegerOption(option =>
            option.setName('size')
                .setDescription('Optional: What is the max size of the party?')
                .setRequired(false))
        .addStringOption(option =>
            option.setName('description')
                .setDescription('Optional: Additional information?')
                .setRequired(false)),
    new SlashCommandBuilder()
        .setName('eventcreate')
        .setDescription('Creates an event with an attend button')